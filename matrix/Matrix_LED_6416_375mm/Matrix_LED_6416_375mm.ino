//Author: cantone-electonics
//More information welcome to : http://www.canton-electronics.com
//Arduino 1.0.4
//Arduino uno R3
//64x16 Matrix LED

#define COL_PIXEL     64
#define ROW_PIXEL     16

char font8x8_basic[128][8] = {
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0000 (nul)
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0001
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0002
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0003
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0004
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0005
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0006
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0007
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0008
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0009
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000A
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000B
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000C
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000D
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000E
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+000F
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0010
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0011
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0012
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0013
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0014
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0015
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0016
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0017
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0018
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0019
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001A
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001B
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001C
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001D
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001E
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+001F
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0020 (space)
  { 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00},   // U+0021 (!)
  { 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0022 (")
  { 0x36, 0x36, 0x7F, 0x36, 0x7F, 0x36, 0x36, 0x00},   // U+0023 (#)
  { 0x0C, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x0C, 0x00},   // U+0024 ($)
  { 0x00, 0x63, 0x33, 0x18, 0x0C, 0x66, 0x63, 0x00},   // U+0025 (%)
  { 0x1C, 0x36, 0x1C, 0x6E, 0x3B, 0x33, 0x6E, 0x00},   // U+0026 (&)
  { 0x06, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0027 (')
  { 0x18, 0x0C, 0x06, 0x06, 0x06, 0x0C, 0x18, 0x00},   // U+0028 (()
  { 0x06, 0x0C, 0x18, 0x18, 0x18, 0x0C, 0x06, 0x00},   // U+0029 ())
  { 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00},   // U+002A (*)
  { 0x00, 0x0C, 0x0C, 0x3F, 0x0C, 0x0C, 0x00, 0x00},   // U+002B (+)
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+002C (,)
  { 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00},   // U+002D (-)
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+002E (.)
  { 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00},   // U+002F (/)
  { 0x38, 0x83, 0x83, 0x83, 0x83, 0x83, 0x38, 0x00},   // U+0030 (0)
  { 0x0C, 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x3F, 0x00},   // U+0031 (1)
  { 0x1E, 0x33, 0x30, 0x1C, 0x06, 0x33, 0x3F, 0x00},   // U+0032 (2)
  { 0x1E, 0x33, 0x30, 0x1C, 0x30, 0x33, 0x1E, 0x00},   // U+0033 (3)
  { 0x30, 0x3C, 0x33, 0x33, 0x7F, 0x30, 0xff, 0x00},   // U+0034 (4)
  { 0x3F, 0x03, 0x1F, 0x30, 0x30, 0x33, 0x1E, 0x00},   // U+0035 (5)
  { 0x1C, 0x06, 0x03, 0x1F, 0x33, 0x33, 0x1E, 0x00},   // U+0036 (6)
  { 0x3F, 0x33, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x00},   // U+0037 (7)
  { 0x1E, 0x33, 0x33, 0x1E, 0x33, 0x33, 0x1E, 0x00},   // U+0038 (8)
  { 0x1E, 0x33, 0x33, 0x3E, 0x30, 0x18, 0x0E, 0x00},   // U+0039 (9)
  { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x00},   // U+003A (:)
  { 0x00, 0x0C, 0x0C, 0x00, 0x00, 0x0C, 0x0C, 0x06},   // U+003B (//)
  { 0x18, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x18, 0x00},   // U+003C (<)
  { 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x00, 0x00},   // U+003D (=)
  { 0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00},   // U+003E (>)
  { 0x1E, 0x33, 0x30, 0x18, 0x0C, 0x00, 0x0C, 0x00},   // U+003F (?)
  { 0x3E, 0x63, 0x7B, 0x7B, 0x7B, 0x03, 0x1E, 0x00},   // U+0040 (@)
  { 0x0C, 0x1E, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x00},   // U+0041 (A)
  { 0x3F, 0x33, 0x33, 0x3E, 0x33, 0x33, 0x3F, 0x00},   // U+0042 (B)
  { 0x3C, 0x66, 0x03, 0x03, 0x03, 0x66, 0x3C, 0x00},   // U+0043 (C)
  { 0x1F, 0xf6, 0x83, 0x83, 0x83, 0xf6, 0x1F, 0x00},   // U+0044 (D)
  { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x46, 0x7F, 0x00},   // U+0045 (E)
  { 0x7F, 0x46, 0x16, 0x1E, 0x16, 0x06, 0x0F, 0x00},   // U+0046 (F)
  { 0x3C, 0x66, 0x03, 0x03, 0x73, 0x66, 0x7C, 0x00},   // U+0047 (G)
  { 0x33, 0x33, 0x33, 0x3F, 0x33, 0x33, 0x33, 0x00},   // U+0048 (H)
  { 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0049 (I)
  { 0x78, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E, 0x00},   // U+004A (J)
  { 0x83, 0x83, 0x36, 0x1E, 0x36, 0x83, 0x83, 0x00},   // U+004B (K)
  { 0x0F, 0x06, 0x06, 0x06, 0x46, 0x66, 0x7F, 0x00},   // U+004C (L)
  { 0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00},   // U+004D (M)
  { 0x63, 0x67, 0x6F, 0x7B, 0x73, 0x63, 0x63, 0x00},   // U+004E (N)
  { 0x1C, 0x36, 0x63, 0x63, 0x63, 0x36, 0x1C, 0x00},   // U+004F (O)
  { 0x3F, 0x83, 0x83, 0x3E, 0x06, 0x06, 0x0F, 0x00},   // U+0050 (P)
  { 0x1E, 0x33, 0x33, 0x33, 0x3B, 0x1E, 0x38, 0x00},   // U+0051 (Q)
  { 0x3F, 0x83, 0x83, 0x3E, 0x0f, 0x33, 0x83, 0x00},   // U+0052 (R)
  { 0x1E, 0x33, 0x07, 0x0E, 0x38, 0x33, 0x1E, 0x00},   // U+0053 (S)
  { 0x3F, 0x2D, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0054 (T)
  { 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3F, 0x00},   // U+0055 (U)
  { 0x33, 0x33, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0056 (V)
  { 0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00},   // U+0057 (W)
  { 0x63, 0x63, 0x36, 0x1C, 0x1C, 0x36, 0x63, 0x00},   // U+0058 (X)
  { 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x0C, 0x1E, 0x00},   // U+0059 (Y)
  { 0x3F, 0x30, 0x30, 0x18, 0x0f, 0x03, 0x3F, 0x00},   // U+005A (Z)
  { 0x1E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x1E, 0x00},   // U+005B ([)
  { 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x40, 0x00},   // U+005C (\)
  { 0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00},   // U+005D (])
  { 0x08, 0x1C, 0x36, 0x63, 0x00, 0x00, 0x00, 0x00},   // U+005E (^)
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},   // U+005F (_)
  { 0x0C, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+0060 (`)
  { 0x00, 0x00, 0x1E, 0x30, 0x3E, 0x33, 0x6E, 0x00},   // U+0061 (a)
  { 0x07, 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3B, 0x00},   // U+0062 (b)
  { 0x00, 0x00, 0x1E, 0x33, 0x03, 0x33, 0x1E, 0x00},   // U+0063 (c)
  { 0x38, 0x30, 0x30, 0x3e, 0x33, 0x33, 0x6E, 0x00},   // U+0064 (d)
  { 0x00, 0x00, 0x1E, 0x33, 0x3f, 0x03, 0x1E, 0x00},   // U+0065 (e)
  { 0x1C, 0x36, 0x06, 0x0f, 0x06, 0x06, 0x0F, 0x00},   // U+0066 (f)
  { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0067 (g)
  { 0x07, 0x06, 0x36, 0x6E, 0x66, 0x66, 0x67, 0x00},   // U+0068 (h)
  { 0x0C, 0x00, 0x0E, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+0069 (i)
  { 0x30, 0x00, 0x30, 0x30, 0x30, 0x33, 0x33, 0x1E},   // U+006A (j)
  { 0x07, 0x06, 0x66, 0x36, 0x1E, 0x36, 0x67, 0x00},   // U+006B (k)
  { 0x0E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x1E, 0x00},   // U+006C (l)
  { 0x00, 0x00, 0x33, 0x7F, 0x7F, 0x6B, 0x63, 0x00},   // U+006D (m)
  { 0x00, 0x00, 0x1F, 0x33, 0x33, 0x33, 0x33, 0x00},   // U+006E (n)
  { 0x00, 0x00, 0x1E, 0x33, 0x33, 0x33, 0x1E, 0x00},   // U+006F (o)
  { 0x00, 0x00, 0x3B, 0x66, 0x66, 0x3E, 0x06, 0x0F},   // U+0070 (p)
  { 0x00, 0x00, 0x6E, 0x33, 0x33, 0x3E, 0x30, 0x78},   // U+0071 (q)
  { 0x00, 0x00, 0x3B, 0x6E, 0x66, 0x06, 0x0F, 0x00},   // U+0072 (r)
  { 0x00, 0x00, 0x3E, 0x03, 0x1E, 0x30, 0x1F, 0x00},   // U+0073 (s)
  { 0x08, 0x0C, 0x3E, 0x0C, 0x0C, 0x2C, 0x18, 0x00},   // U+0074 (t)
  { 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x6E, 0x00},   // U+0075 (u)
  { 0x00, 0x00, 0x33, 0x33, 0x33, 0x1E, 0x0C, 0x00},   // U+0076 (v)
  { 0x00, 0x00, 0x63, 0x6B, 0x7F, 0x7F, 0x36, 0x00},   // U+0077 (w)
  { 0x00, 0x00, 0x63, 0x36, 0x1C, 0x36, 0x63, 0x00},   // U+0078 (x)
  { 0x00, 0x00, 0x33, 0x33, 0x33, 0x3E, 0x30, 0x1F},   // U+0079 (y)
  { 0x00, 0x00, 0x3F, 0x19, 0x0C, 0x26, 0x3F, 0x00},   // U+007A (z)
  { 0x38, 0x0C, 0x0C, 0x07, 0x0C, 0x0C, 0x38, 0x00},   // U+007B ({)
  { 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x00},   // U+007C (|)
  { 0x07, 0x0C, 0x0C, 0x38, 0x0C, 0x0C, 0x07, 0x00},   // U+007D (})
  { 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // U+007E (~)
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}    // U+007F
};

int latchPin = 10; //LT
int clockPin = 12; //SK
int dataPin = 11; //R1

int en_74138 = 2;
int la_74138 = 3;
int lb_74138 = 4;
int lc_74138 = 5;
int ld_74138 = 6;

unsigned int ROW_xPixel;
unsigned int ROW_num;
unsigned char Col_num_1;
unsigned char Col_num_2;
unsigned char Col_num_3;
unsigned char Col_num_4;
unsigned char Col_num_5;
unsigned char Col_num_6;
unsigned char Col_num_7;
unsigned char Col_num_8;


//Data code: Horizontal modulus ,Bytes reverse order
unsigned char  Bmp1[] =
{
  /*------------------------------------------------------------------------------
  ;  Width X height (pixels): 64X16
  ;I Love You
  ------------------------------------------------------------------------------*/
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xff, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0xc, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x3, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x30, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x3, 0xc0, 0x3, 0x3, 0x30, 0xf0, 0x0, 0xc0, 0xc,
  0xf0, 0xc0, 0x0, 0x3, 0x0, 0xc, 0x0, 0x3, 0x30, 0xc, 0x3, 0x30, 0xc, 0x3, 0x0, 0x3, 0xc, 0xc3, 0x0, 0x3, 0x0, 0xc,
  0x0, 0x3, 0xc, 0x30, 0x3, 0x30, 0x3, 0xc, 0x0, 0x3, 0x3, 0xcc, 0x0, 0x3, 0x0, 0xc, 0x0, 0x3, 0xc, 0x30, 0x3, 0x30,
  0x3, 0xc, 0x0, 0x3, 0x3, 0xcc, 0x0, 0x3, 0x0, 0xc, 0x0, 0x3, 0xc, 0x30, 0x3, 0x30, 0xf, 0xc, 0x0, 0x3, 0x3, 0xcc,
  0x0, 0x3, 0x0, 0xc, 0x0, 0x3, 0xc, 0x30, 0x3, 0x30, 0xf3, 0x3, 0x0, 0x3, 0x3, 0xcc, 0x0, 0x3, 0x0, 0xc, 0x0, 0x3,
  0xc, 0x30, 0xc, 0xc, 0x3, 0x0, 0x0, 0x3, 0x3, 0xcc, 0x0, 0x3, 0x0, 0xc, 0x0, 0xc3, 0x30, 0xc, 0x30, 0x3, 0x3, 0xc,
  0x0, 0x3, 0xc, 0xc3, 0x0, 0x3, 0xc0, 0xff, 0x0, 0xff, 0xc0, 0x3, 0xc0, 0x0, 0xfc, 0x3, 0x0, 0x3, 0xf0, 0x0, 0xff,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
};



unsigned char  Bmp2[] =
{
  /*------------------------------------------------------------------------------
  ; Width X height (pixels): 16X16
  ;WELCOME 64 16
  ------------------------------------------------------------------------------*/
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0x30, 0xf0, 0xfc, 0xff, 0x3c, 0x0,
  0xf0, 0x3f, 0xf0, 0xf, 0x3c, 0x0, 0xcf, 0xff, 0x3f, 0x3c, 0xf0, 0xf0, 0xfc, 0xff, 0x3c, 0x0, 0xfc, 0x3f, 0xfc, 0x3f, 0x3c,
  0x0, 0xcf, 0xff, 0x3f, 0x3c, 0xf0, 0xf0, 0x3c, 0x0, 0x3c, 0x0, 0xf, 0x0, 0xf, 0xf0, 0x3c, 0x0, 0xcf, 0x3, 0x0, 0x3c, 0xfc,
  0xf0, 0x3c, 0x0, 0x3c, 0x0, 0xf, 0x0, 0xf, 0xf0, 0xfc, 0xc0, 0xcf, 0x3, 0x0, 0x3c, 0xfc, 0xf0, 0x3c, 0x0, 0x3c, 0x0, 0xf,
  0x0, 0xf, 0xf0, 0xfc, 0xf0, 0xcf, 0x3, 0x0, 0xfc, 0xfc, 0xfc, 0xfc, 0xff, 0x3c, 0x0, 0xf, 0x0, 0xf, 0xf0, 0xfc, 0xf3, 0xcf,
  0xff, 0x3f, 0xf0, 0xfc, 0x3c, 0xfc, 0xff, 0x3c, 0x0, 0xf, 0x0, 0xf, 0xf0, 0x3c, 0x3f, 0xcf, 0xff, 0x3f, 0xf0, 0xfc, 0x3c,
  0x3c, 0x0, 0x3c, 0x0, 0xf, 0x0, 0xf, 0xf0, 0x3c, 0x3f, 0xcf, 0x3, 0x0, 0xf0, 0xfc, 0x3c, 0x3c, 0x0, 0x3c, 0x0, 0xf, 0x0,
  0xf, 0xf0, 0x3c, 0x3f, 0xcf, 0x3, 0x0, 0xf0, 0xff, 0x3f, 0x3c, 0x0, 0x3c, 0x0, 0xf, 0x0, 0xf, 0xf0, 0x3c, 0x3f, 0xcf, 0x3,
  0x0, 0xf0, 0xff, 0x3f, 0x3c, 0x0, 0x3c, 0x0, 0xf, 0x0, 0xf, 0xf0, 0x3c, 0x3f, 0xcf, 0x3, 0x0, 0xc0, 0xcf, 0xf, 0x3c, 0x0,
  0x3c, 0x0, 0xf, 0x0, 0xf, 0xf0, 0x3c, 0xf, 0xcf, 0x3, 0x0, 0xc0, 0xcf, 0xf, 0xfc, 0xff, 0xfc, 0xff, 0xfc, 0x3f, 0xfc, 0x3f,
  0x3c, 0xc, 0xcf, 0xff, 0x3f, 0x0, 0x3, 0x3, 0xfc, 0xff, 0xfc, 0xff, 0xf0, 0x3f, 0xf0, 0xf, 0x3c, 0xc, 0xcf, 0xff, 0x3f, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
};

unsigned char  Bmp3[] =
{
  /*------------------------------------------------------------------------------
  ;  Width X height (pixels): 64X16
  ;diameter_3.75mm
  ------------------------------------------------------------------------------*/
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xfc, 0x0, 0xf0, 0xf, 0xc0, 0xff, 0x3f,
  0xfc, 0xff, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x0, 0xc, 0x30, 0x0, 0x0, 0x30, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x30, 0x0, 0x0, 0xc0, 0x0, 0x0, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0x3, 0x0, 0xc0, 0x0, 0x0, 0x3,
  0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x30, 0xc, 0x0, 0xc0, 0x0, 0xc0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x30, 0x30, 0x30, 0x0, 0x30, 0x0, 0x30, 0x0, 0xfc, 0xf, 0x0, 0xf, 0x3c, 0xf0, 0xc0, 0x3, 0x30, 0x30, 0x30, 0xfc, 0xf, 0x0,
  0x30, 0x0, 0x0, 0x30, 0xc0, 0x30, 0xc3, 0xc, 0x33, 0xc, 0x30, 0x30, 0x30, 0x0, 0x30, 0x0, 0x30, 0x0, 0x0, 0xc0, 0xc0, 0xc0,
  0xc0, 0xc, 0xc, 0xc, 0x30, 0x30, 0x30, 0x0, 0xc0, 0x0, 0x30, 0x0, 0x0, 0x0, 0xc3, 0xc0, 0xc0, 0xc, 0xc, 0xc, 0xc0, 0x30, 0xc
  , 0x0, 0xc0, 0x0, 0x30, 0x0, 0x0, 0x0, 0xc3, 0xc0, 0xc0, 0xc, 0xc, 0xc, 0x0, 0xff, 0x3, 0x0, 0xc0, 0x3c, 0x30, 0x0, 0x0, 0x0,
  0xc3, 0xc0, 0xc0, 0xc, 0xc, 0xc, 0x0, 0x30, 0x0, 0x0, 0xc0, 0x3c, 0x30, 0x0, 0x0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc, 0xc, 0xc, 0x0,
  0x30, 0x0, 0xc, 0x30, 0x0, 0x30, 0x0, 0x0, 0x30, 0xc0, 0xc0, 0xc0, 0xc, 0xc, 0xc, 0x0, 0xfc, 0x0, 0xf0, 0xf, 0x0, 0x30, 0x0,
  0xfc, 0xf, 0xc0, 0xc0, 0xc0, 0xc, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0

};

unsigned char  Bmp4[] =
{
  /*------------------------------------------------------------------------------
  ;  Width X height (pixels): 64X16
  ; ARDUINO
  ------------------------------------------------------------------------------*/
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3c, 0xc0, 0xff, 0x3, 0xff, 0xf, 0xc,
  0x0, 0xc3, 0xff, 0xc, 0x0, 0x3, 0xff, 0x0, 0x0, 0xc3, 0xc0, 0x0, 0xc, 0x3, 0x30, 0xc, 0x0, 0x3, 0xc, 0x3c, 0x0, 0xc3, 0x0,
  0x3, 0xc0, 0x0, 0xc3, 0x0, 0x30, 0x3, 0xc0, 0xc, 0x0, 0x3, 0xc, 0xcc, 0x0, 0x33, 0x0, 0xc, 0x30, 0x0, 0xcc, 0x0, 0x30, 0x3,
  0xc0, 0xc, 0x0, 0x3, 0xc, 0xcc, 0x0, 0x33, 0x0, 0xc, 0x30, 0x0, 0xcc, 0x0, 0x30, 0x3, 0xc0, 0xc, 0x0, 0x3, 0xc, 0xc, 0x3,
  0x33, 0x0, 0xc, 0x30, 0x0, 0xcc, 0x0, 0xc, 0x3, 0xc0, 0xc, 0x0, 0x3, 0xc, 0xc, 0x3, 0x33, 0x0, 0xc, 0xf0, 0xff, 0xcf, 0xff,
  0x3, 0x3, 0xc0, 0xc, 0x0, 0x3, 0xc, 0xc, 0x3, 0x33, 0x0, 0xc, 0x30, 0x0, 0xcc, 0x3, 0x0, 0x3, 0xc0, 0xc, 0x0, 0x3, 0xc, 0xc,
  0xc, 0x33, 0x0, 0xc, 0x30, 0x0, 0xcc, 0xc, 0x0, 0x3, 0xc0, 0xc, 0x0, 0x3, 0xc, 0xc, 0xc, 0x33, 0x0, 0xc, 0x30, 0x0, 0xcc, 0x30,
  0x0, 0x3, 0xc0, 0xc, 0x0, 0x3, 0xc, 0xc, 0xc, 0x33, 0x0, 0xc, 0x30, 0x0, 0xcc, 0xc0, 0x0, 0x3, 0xc0, 0xc, 0x0, 0x3, 0xc, 0xc,
  0x30, 0x33, 0x0, 0xc, 0x30, 0x0, 0xcc, 0x0, 0x3, 0x3, 0x30, 0xc, 0x0, 0x3, 0xc, 0xc, 0x30, 0x33, 0x0, 0xc, 0x30, 0x0, 0xcc, 0x0,
  0xc, 0x3, 0xc, 0x30, 0xc0, 0x0, 0xc, 0xc, 0xc0, 0xc3, 0x0, 0x3, 0x30, 0x0, 0xcc, 0x0, 0x30, 0xff, 0x3, 0xc0, 0x3f, 0xc0, 0xff, 0xc,
  0x0, 0x3, 0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0
};



unsigned char  Bmp5Original[] =
{
  /*------------------------------------------------------------------------------
  ;  Width X height (pixels): 16X16
  ;arduino_martix
  ------------------------------------------------------------------------------*/
  0xc0, 0xc0, 0xf, 0x3f, 0xc, 0xf3, 0x33, 0xc, 0xf, 0xc, 0x33, 0xc, 0xf, 0xfc, 0xc0, 0x3, 0x30, 0xc3, 0x30, 0xc3, 0xc, 0xc3, 0xf0,
  0xcc, 0x30, 0xc, 0xf3, 0xcc, 0x30, 0xc, 0x33, 0xc, 0xc, 0xcc, 0x30, 0xc3, 0xc, 0xc3, 0xf0, 0xcc, 0x30, 0xc, 0xf3, 0xcc, 0x30, 0xc,
  0x3, 0xc, 0xfc, 0xcf, 0xf, 0xc3, 0xc, 0xc3, 0x30, 0xcf, 0x30, 0xc, 0x33, 0xcf, 0x30, 0xfc, 0xc0, 0x3, 0xc, 0xcc, 0x3, 0xc3, 0xc,
  0xc3, 0x30, 0xcf, 0x30, 0xc, 0x33, 0xcf, 0x30, 0x3c, 0x0, 0xc, 0xc, 0xcc, 0xc, 0xc3, 0xc, 0xc3, 0x30, 0xcf, 0x30, 0xc, 0x33, 0xcf,
  0x30, 0xcc, 0x30, 0xc, 0xc, 0xcc, 0x30, 0x3f, 0xf0, 0xf0, 0x33, 0xc, 0xf, 0xf0, 0x30, 0xc, 0xf, 0xc, 0xc3, 0x3, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0xc, 0xc, 0xc, 0xfc, 0xfc, 0xf0, 0x33, 0x30, 0x0, 0x0, 0xf, 0x33, 0x0, 0x0, 0xc3, 0x3, 0x3c, 0xf, 0x33, 0x30, 0xc, 0xc3,
  0xc0, 0xc, 0x0, 0xc0, 0x30, 0x33, 0x0, 0xc0, 0x33, 0xc, 0xcc, 0xcc, 0xc0, 0x30, 0xc, 0xc3, 0xc0, 0x3, 0x0, 0xc0, 0x0, 0x33, 0xc,
  0xc, 0x33, 0x0, 0xc, 0xcc, 0xff, 0x30, 0xfc, 0xc0, 0x0, 0x3, 0x0, 0xc0, 0xf, 0xff, 0x30, 0x3, 0xf3, 0x3, 0xc, 0xcc, 0xc0, 0x30,
  0x3c, 0xc0, 0xc0, 0xc, 0x0, 0xc0, 0x30, 0x30, 0xc0, 0x0, 0x33, 0xc, 0xc, 0xcc, 0xc0, 0x30, 0xcc, 0xc0, 0xc0, 0xc, 0x0, 0xc0, 0x30,
  0x30, 0x30, 0x3, 0x33, 0xc, 0xc, 0xcc, 0xc0, 0x30, 0xc, 0xf3, 0x33, 0x30, 0x0, 0x0, 0xf, 0x30, 0xc, 0xcc, 0xcf, 0x3

};

unsigned char  Bmp5[] =
{
  /*------------------------------------------------------------------------------
  ;  Width X height (pixels): 16X16
  ;arduino_martix
  ------------------------------------------------------------------------------*/
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};

unsigned char  Bmp6[] =
{
  /*------------------------------------------------------------------------------
  ;  Width X height (pixels): 64X16
  ;merry_christmas
  ------------------------------------------------------------------------------*/
  0x0, 0x0, 0x30, 0x30, 0xff, 0xfc, 0xf0, 0xc3, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x30, 0x30, 0x3, 0xc, 0x33,
  0xc, 0x33, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xc, 0x0, 0x0, 0x0, 0xf0, 0x3c, 0x3, 0xc, 0x33, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0x30, 0x30,
  0x0, 0x0, 0x0, 0x30, 0x33, 0xff, 0xfc, 0xf0, 0x3, 0xc, 0x0, 0x0, 0x0, 0x0, 0xfc, 0xff, 0x0, 0x0, 0x0, 0x30, 0x33, 0x3, 0x3c,
  0xf0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc0, 0xc, 0x0, 0x0, 0x0, 0x30, 0x33, 0x3, 0xcc, 0x30, 0x3, 0xc, 0x0, 0x0, 0x0, 0x0, 0x30,
  0x30, 0x0, 0x0, 0x0, 0x30, 0x33, 0xff, 0xc, 0x33, 0xc, 0xc, 0x0, 0x0, 0x0, 0x0, 0xc, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc0, 0x0, 0x0,
  0xc, 0xf0, 0x30, 0xcc, 0xf, 0x3f, 0x3c, 0xfc, 0xc, 0xc, 0xc, 0xf0, 0xc0, 0xf0, 0xff, 0xff, 0x3f, 0xc, 0x33, 0xcc, 0x30, 0xc,
  0xc3, 0x30, 0xc, 0xc, 0x33, 0xc, 0xc3, 0x0, 0x0, 0x3, 0x0, 0xc, 0x30, 0xcc, 0x30, 0xc, 0x3, 0x30, 0x3c, 0xcf, 0xc0, 0xc, 0xc0,
  0x0, 0x0, 0x3, 0x0, 0xc, 0xf0, 0xcf, 0xf, 0xc, 0x3c, 0x30, 0xcc, 0xcc, 0xff, 0xf0, 0xc0, 0x0, 0x0, 0x3, 0x0, 0xc, 0x30, 0xcc,
  0x3, 0xc, 0xc0, 0x30, 0xcc, 0xcc, 0xc0, 0x0, 0xc3, 0x0, 0x0, 0x3, 0x0, 0xc, 0x33, 0xcc, 0xc, 0xc, 0xc3, 0x30, 0xcc, 0xcc, 0xc0,
  0xc, 0x3, 0x0, 0x0, 0x3, 0x0, 0xf0, 0x30, 0xcc, 0x30, 0x3f, 0x3c, 0x30, 0xcc, 0xcc, 0xc0, 0xf0, 0xc0, 0x0, 0x0, 0x3, 0x0


};


void shiftOut(unsigned char dataOut)
{
  for (int i = 0; i <= 7; i++)
  {
    PORTB &= ~(1 << (clockPin - 8)); //equate digitalWrite(clockPin,LOW);

    if (dataOut & (0x01 << i))  PORTB |= 1 << (dataPin - 8); //equate digitalWrite(dataPin,HIGH);
    else  PORTB &= ~(1 << (dataPin - 8)); //equate digitalWrite(dataPin,LOW);

    PORTB |= 1 << (clockPin - 8); //equate digitalWrite(clockPin,HIGH);

  }
}

//Combine 2 bits/pixel to 1 bits/pixel
unsigned char Combine_2BitsTo1Bit(unsigned char num, unsigned char *BMP)
{

  unsigned char Col_num_tem_1;
  unsigned char Col_num_tem_2;
  unsigned int Col_num_tem = 0;
  unsigned char i = 0;
  unsigned char Col_num_1bit = 0x00;

  Col_num_tem_1 = *(BMP + num);
  Col_num_tem_2 = *(BMP + num + 1);

  Col_num_tem = Col_num_tem_1;
  Col_num_tem |= (Col_num_tem_2 << 8);

  for (i = 0; i < 8; i++)
  {
    if (Col_num_tem & (0x0003 << i * 2)) Col_num_1bit |= (0x01 << i);
  }
  return ~Col_num_1bit;
}

//display one picture
void display_martix(unsigned char *BMP)
{
  //Display count
  unsigned int dis_cnt = 256;
  unsigned int i;

  for (i = 0; i < dis_cnt * 16; i++)
  {

    // digitalWrite(en_74138, HIGH);//Turn off display

    //Col scanning
    shiftOut(Col_num_1);
    shiftOut(Col_num_2);
    shiftOut(Col_num_3);
    shiftOut(Col_num_4);
    shiftOut(Col_num_5);
    shiftOut(Col_num_6);
    shiftOut(Col_num_7);
    shiftOut(Col_num_8);

    digitalWrite(latchPin, LOW);
    digitalWrite(latchPin, HIGH);

    //Row scanning
    // AVR Port Operation
    PORTD = ((ROW_xPixel << 3 ) & 0X78) | (PORTD & 0X87);//Write PIN 3 4 5 6 la_74138 lb_74138 lc_74138 ld_74138

    // digitalWrite(en_74138, LOW);//Turn on display



    if (ROW_xPixel == 15) ROW_xPixel = 0; else ROW_xPixel++;

    /*
    // Single color,1 bits/pixel
    Col_num_1=~BMP[(COL_PIXEL/8)*ROW_xPixel];
    Col_num_2=~BMP[(COL_PIXEL/8)*ROW_xPixel+1];
    Col_num_3=~BMP[(COL_PIXEL/8)*ROW_xPixel+2];
    Col_num_4=~BMP[(COL_PIXEL/8)*ROW_xPixel+3];
    Col_num_5=~BMP[(COL_PIXEL/8)*ROW_xPixel+4];
    Col_num_6=~BMP[(COL_PIXEL/8)*ROW_xPixel+5];
    Col_num_7=~BMP[(COL_PIXEL/8)*ROW_xPixel+6];
    Col_num_8=~BMP[(COL_PIXEL/8)*ROW_xPixel+7];
    */

    //Single color,2 bits/pixel
    Col_num_1 = Combine_2BitsTo1Bit((COL_PIXEL / 8) * ROW_xPixel * 2, BMP);
    Col_num_2 = Combine_2BitsTo1Bit((COL_PIXEL / 8) * ROW_xPixel * 2 + 2, BMP);
    Col_num_3 = Combine_2BitsTo1Bit((COL_PIXEL / 8) * ROW_xPixel * 2 + 4, BMP);
    Col_num_4 = Combine_2BitsTo1Bit((COL_PIXEL / 8) * ROW_xPixel * 2 + 6, BMP);
    Col_num_5 = Combine_2BitsTo1Bit((COL_PIXEL / 8) * ROW_xPixel * 2 + 8, BMP);
    Col_num_6 = Combine_2BitsTo1Bit((COL_PIXEL / 8) * ROW_xPixel * 2 + 10, BMP);
    Col_num_7 = Combine_2BitsTo1Bit((COL_PIXEL / 8) * ROW_xPixel * 2 + 12, BMP);
    Col_num_8 = Combine_2BitsTo1Bit((COL_PIXEL / 8) * ROW_xPixel * 2 + 14, BMP);

  }

}

void setup()
{
  pinMode(latchPin, OUTPUT);
  pinMode(clockPin, OUTPUT);
  pinMode(dataPin, OUTPUT);

  pinMode(en_74138, OUTPUT);
  pinMode(la_74138, OUTPUT);
  pinMode(lb_74138, OUTPUT);
  pinMode(lc_74138, OUTPUT);
  pinMode(ld_74138, OUTPUT);


  digitalWrite(en_74138, LOW);

  // AVR Port Settings
  DDRD |= 0x78; //Set PIN 3 4 5 6 output

  Serial.begin(115200);
  Serial.setTimeout(100000);
}

String current = "";

void serialEvent() {
  if (Serial.available())
  {
    current =  Serial.readStringUntil('=');
  }
}

char newLine = '\n';
int cnt = 0;

void loop()
{
  //  String current="HELLO\nTESZT";
  int currentLength = current.length();
  if (currentLength > 0)
  {
    int newLineIndex = current.indexOf(newLine);
    String firstRow = current.substring(0, newLineIndex);
    String secondRow = current.substring(newLineIndex + 1, currentLength);
    handleRow(firstRow, 0);
    handleRow(secondRow, 1);

    display_martix(Bmp5);
  }
  cnt++;
}

int characterRows = 8;
int rowSizeInBitmap = 16;

void handleRow(String text, int rowNum)
{
  int textLength = text.length();

  for (int i = 0; i < textLength; i++)
  {
    unsigned char c = text[i];

    unsigned char cMap[] = {font8x8_basic[c][0], font8x8_basic[c][1], font8x8_basic[c][2], font8x8_basic[c][3], font8x8_basic[c][4], font8x8_basic[c][5], font8x8_basic[c][6], font8x8_basic[c][7]};

    for (int row = 0; row < characterRows; row++)
    {
      Bmp5[rowSizeInBitmap * characterRows * rowNum + rowSizeInBitmap * row + i] = cMap[row];
    }

  }
}



